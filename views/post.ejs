
<style>
  .article {
    margin: 10px 0 24px 0;
    line-height: 2;
  }

  .carousel-container {
    position: relative;
    width: 100%;
    max-width: 800px;
    margin: 0 auto;
    overflow: hidden;
  }

  .carousel-slides {
    display: flex;
    transition: transform 0.5s ease-in-out;
  }

  .carousel-item {
    position: relative;
    min-width: 100%;
    box-sizing: border-box;
  }

  .carousel-item img {
    width: 100%;
    display: block;
  }

  .carousel-caption {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    background: rgba(0, 0, 0, 0.5);
    color: white;
    padding: 10px 20px;
    border-radius: 5px;
    text-align: center;
  }

  .carousel-indicators {
    position: absolute;
    bottom: 10px;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 5px;
  }

  .indicator {
    width: 10px;
    height: 10px;
    background:gray ;
    border-radius: 50%;
    cursor: pointer;
  }
  
  .indicator.active {
    background:lightgray ;
  }

  .carousel-control {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(0, 0, 0, 0.5);
    color: white;
    border: none;
    font-size: 18px;
    padding: 10px;
    cursor: pointer;
  }

  .carousel-control.left {
    left: 10px;
  }

  .carousel-control.right {
    right: 10px;
  }
</style>


<a href="/">&larr; Back</a>
<h1 style="font-size: xx-large; text-align: center; padding: 24px 0;"><%= data.title %></h1>
<article class="article"><%= data.body %></article>

<div class="hero-image" width="981" height="528">


  
      


<div class="carousel-container">
  <!-- Wrapper for slides -->
  <div class="carousel-slides">
  <% data.media.forEach(media => { %>
    <% if (media) { %>
      <% 
        // Extract file extension and convert to lowercase
        const extension = media.split('.').pop().toLowerCase(); 
      %>
    <div class="carousel-item">
      <% if (['mp4', 'webm', 'ogg'].includes(extension)) { %>
        <!-- Render video -->
        <video width="100%" height="100%" style="border-radius: 8px;" controls>
          <source src="<%= media %>" type="video/<%= extension %>">
          Your browser does not support the video tag.
        </video>
      <% } else if (['png', 'jpg', 'jpeg', 'webp'].includes(extension)) { %>
        <!-- Render image -->
        <img src="<%= media %>" class="hero-image" alt="Media" width="981" height="528">
      <% } else { %>
        <!-- Unsupported media type -->
        <p>Unsupported media type: <%= extension %></p>
      <% } %>
      <!-- <div class="carousel-caption">
        <h3>Los Angeles</h3>
        <p>LA is always so much fun!</p>
      </div> -->
    </div>
    <% } %>
    <% }) %>
  </div>
  <!-- Left and right controls -->
  <button class="carousel-control left">&lt;</button>
  <button class="carousel-control right">&gt;</button>
</div>
    
    
    <!-- Indicators -->
    <div class="carousel-indicators">
      <% data.media.forEach(media => { %>
        <% let flag = 0 %>
          <div class="indicator active" data-slide="<%= flag %>"></div>
          <% flag +=1 %>
        <% }) %>
        </div>
    <!-- <div class="carousel-indicators">
      <div class="indicator active" data-slide="0"></div>
      <div class="indicator" data-slide="1"></div>
      <div class="indicator" data-slide="2"></div>
    </div> -->
    
</div>

<script>
  const slides = document.querySelector('.carousel-slides');
const items = document.querySelectorAll('.carousel-item');
const indicators = document.querySelectorAll('.indicator');
const prevButton = document.querySelector('.carousel-control.left');
const nextButton = document.querySelector('.carousel-control.right');

let currentIndex = 0;
let autoSlideInterval;
let isVideoPlaying = false; // Flag to track if any video is playing

// Function to update carousel to a specific index
function updateCarousel(index) {
  const offset = -index * 100; // Shift by percentage of the slide width
  slides.style.transform = `translateX(${offset}%)`;

  // Update active indicator
  indicators.forEach((indicator, i) => {
    indicator.classList.toggle('active', i === index);
  });
}

// Next Slide
function nextSlide() {
  if (!isVideoPlaying) {
    currentIndex = (currentIndex + 1) % items.length;
    updateCarousel(currentIndex);
  }
}

// Previous Slide
function prevSlide() {
  if (!isVideoPlaying) {
    currentIndex = (currentIndex - 1 + items.length) % items.length;
    updateCarousel(currentIndex);
  }
}

// Indicator Click
indicators.forEach((indicator, index) => {
  indicator.addEventListener('click', () => {
    if (!isVideoPlaying) {
      currentIndex = index;
      updateCarousel(currentIndex);
      resetAutoSlide(); // Reset auto-slide when clicked
    }
  });
});

// Auto-slide every 5 seconds
function startAutoSlide() {
  autoSlideInterval = setInterval(nextSlide, 3000);
}

// Reset auto-slide timer
function resetAutoSlide() {
  clearInterval(autoSlideInterval);
  startAutoSlide();
}

// Attach button click events
nextButton.addEventListener('click', () => {
  videos.forEach(video => {
    video.pause()
  })
  nextSlide();
  resetAutoSlide(); // Reset auto-slide when clicked
});

prevButton.addEventListener('click', () => {
  videos.forEach(video => {
    video.pause()
  })
  prevSlide();
  resetAutoSlide(); // Reset auto-slide when clicked
});

// Select all video elements
const videos = document.querySelectorAll('video');

// Check if any video is playing
function handleVideoPlayback() {
  isVideoPlaying = Array.from(videos).some(video => !video.paused);
  if (isVideoPlaying) {
    clearInterval(autoSlideInterval); // Pause auto-slide when video is playing
  } else {
    startAutoSlide(); // Resume auto-slide when no video is playing
  }
}

// Listen to the video events
videos.forEach(video => {
  video.addEventListener('play', () => {
    handleVideoPlayback(); // Stop carousel when the video plays
  });

  video.addEventListener('pause', () => {
    handleVideoPlayback(); // Resume carousel when the video pauses
  });

  video.addEventListener('ended', () => {
    handleVideoPlayback(); // Resume carousel when the video ends
  });

  // Toggle play/pause on video click
  video.addEventListener('click', () => {
    if (video.paused) {
      video.play();
    } else {
      video.pause();
    }
  });
});

// Start auto-slide when the page loads (or when no video is playing)
startAutoSlide();

</script>
